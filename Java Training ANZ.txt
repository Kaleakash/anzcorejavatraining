25-02-2019

	Day 1 :
	
	C : 	
		Basic Procudure Language 

		OOPs 


		void abc() {
			xyz();	
		}
		void xyz() {
			mno();
		}
		void mno() {

		}
		void main() {
			abc();	
		}
	C++

	C#

	

	Java : Object Oriented Programming Language. 

	object : any real world entity 
		state (properties)--->have ---->variables /fields 
	person 
		behaviour ------>do/does ---->function / methods 
	bank 
	animal 
	car 

	class : blue print of object or template of object. 	



	C

			C+OOPs = C++



	
	Java				.net 

	Core Java				C# 
	
	Java is a pure object platform independent programming language. 

	Version java : 

	1.0				java 8, java9, 	java 11


	
	class syntax 

	class className {
		variable declaration;
		method declaration;
	}

	Pascal Naming rule 

	class Test {		

		public static void main(String args[]) {
			System.out.println();
		}	
	}


	JDK: Java Development Kit  
	JRE : Java Run environment 



	javac : Java compiler 

	javac className/fileName.java 		javac Test.java 

	java : Java interpreter 

	java className

	
	Data Types : 
	
	Data type is type of data which tells what type of data it can hold. 

	types of Data types 
	
	1. primitive data type : It is use to store only value.

		8 types 

	a. byte 1 byte
	b. short 2 byte			without decimal point 10,  200, 
	c. int     4 byte 
	d. long   8 byte 
	
	e. float  4 byte 		with decimal points, 10.20, 
	f. double 8 byte 
	
	g. char 2 byte 		any single character 'a', '1' , '$', 
	h. boolean 	1 bit 	true or false.

class Test {
	public static void main(String args[]) {
	int a;
	int b=10;
	double d = 10.10;
	char c = '$';
	boolean res = true;
	System.out.println(b);
	System.out.println(res);
	System.out.println(c);
	}
}

	Operators : 

	1. Arithmetic Operator : +, - , *, /, % 
	2. Logical operator : &&, || , !
	3. Conditional operator : 
	>
	>=
	<
	<=
	==
	!=

	4. assignment operator = 
	int a =10; 
	
	5. increment and decrement operator 

	++ 
			int a=10;
			a++;	or    a = a+1;
	-- 	
			a--	or    a= a-1;

	
	if statements 

	1. simple if 
		
		if(condition) {

		}
		
	2. if else 

		if(codintion) {
			true block 
		}else {
			false block 
		}	
	3. nested if 

		if(condition) {
			
			if(condition) {
				
			}else {
				
			}
		
		}else {
			if(codition) {

			}
		}

	4. if else if or if ladder 

	if(codition) {

	}else if(condition) {

	}else if(condition) {

	}else {
		
	}
		
		switch statement :
	int a=5;
	switch(a){	//type of variable must int family, char, String

		case 1:block1;
			break;
		case 2:block2;
			break;
		case 3:block3;
			break;
		default:defaultblock;
			break;
	}	
		
	Looping statements : 

	It is use to execute set of statements again and again till coditions becomes false. 

	types of loop 
	
	1. while loop		initialization , start and end , i=1,n=10
	2. do while loop 		i<=n	or 	i>=n
	3. for loop 			do the task 
					
				i++	or n--
				

		

	for(initialization;condition;increment/decrement){

	}
                           1            2	4
	for(int i=0,n=10;i<=n;i++){
		System.out.println(i);		3
	}



	4. for each loop or enhanced loop 



	2. non primitive data type or reference data type: It is use to store value as well as 
	reference of another data types. 

	4 types 

	array :
	class :(pre-defined or user-defined)
	interface :(pre-defined or user-defined)
	enum :(pre-defined or user-defined)

	array : array is use to store the n number of elements of the same data types. 

	int a=10;

	
	a=20;

	a=30;

	syntax 

	dataType arrayName[];

	int []abc;				int [10]abc; C/C++ 
	int a;

	int abc[]={10,20,30,40,50,60};

	System.out.println(abc[0]);	

		

	for each loop 

	syntax 

	for(initialization;condition;increment/decrement){

	}

	for(i=0;i<=10;i++){
		System.out.println("Hello");
	}
	
	int abc[]={10,20,30};

	for(dataType variableName:arrayName){

	}

	for(int a:abc){
		System.out.println(a);
	}


	class Test {
	public static void main(String args[]) {
	int []abc={10,20,30,40,50,60,234,56,778,22,33,56,89};
	int a=10;
	System.out.println(abc[0]);
	System.out.println(abc[2]);
	System.out.println("Size of the array is "+abc.length);
	System.out.println("using for loop");
	for(int i=2;i<6;i=i+2) {
		System.out.println(abc[i]);
	}
	System.out.println("Using loop each loop");
	for(int n:abc) {
		System.out.println(n);
	}
	}
}

	Creating the memory size for the array 

	int abc[]=new int[size];		in java
	
	int abc[]=new int[10];

	
	
	int abc[10];			in C/C++

	printf("%d",abc[0])	

	Taking the value through keyboards 

	1. Using Scanner class 	util package 
	2. BufferedReader 		io package 
	3. DataInputStream 		io package 

	
	Scanner is a pre-defined class which provide set of methods which help to scan the value 
	through keyboards. 

	
	Syntax 

	Scanner obj = new Scanner(System.in);

	package : package is a collection of classes and interfaces. 

	lang package 


	8 data types 

	nextByte();
	nextShort();
	nextInt();
	nextLong();
	
	nextFloat();
	nextDouble() 
	
	nextBoolean()

	
	char name='b';

	char name[]=new char[10];
	name[0]='R';
	name[1]='a';
	name[2]='j'

	String name="Raj";

	String name="Ajay Kumar";

	String fname = obj.next();

26-Feb-2019

	object and class :

	
	object : any real world entity 
		properties ---.have
	person 
		behaviour ----do/does 
	bank 
	animal 
	car 

		etc 

	class : blue print of the object or template of the object. 
	int a;
	
	int abc[10];
	
	int abc[]=new int[10];

	structure :

	class :

	class className {
		variable declaration;
		method declaration;
	}		


	method syntax 

	returnType methodName(parameterList) {
	
		method body;
	}

	void display() {		// no passing parameter and no return type 
		System.out.println("Welcome");
	}


	display();	//calling method 

	void add(int x, int y) {		//passing two parameter but no return type 
		int sum = x+y;
		System.out.println("Sum is"+sum);
	}

	add(10,20);	//passing two values 
	
	String sayHello(String name){
		//coding 
		return "Welcome to My Application "+name;
	}

	char getCode() {

		char a='$';

		return a;
	}
	


	employee 
	car 
	person 

	types of variables or fields 

	3 types of variables 

	1. Instance variable 
	2. local variable 
	3. static variable

	Instance variable : 
	1.The variable which declare inside a class but outside method is known as instance 
	variable. 
	2. Instance variable hold default value according to their data types. 
	int family -->0
	float family -->0.0
	char -->white space 
	boolean --> false
	String -->null
	3. Instance variable we can access directly inside method within a same class but method 
	must be non static. 

	Local variable 
	1. The variable which delcare inside a method (method must be inside a class only)
	is known as local variable. 
	2. local variable doesn't hold defualt value we have to initialize. 
	3. The scope of the local variable within same method where it declare. 

	https://github.com/Kaleakash/anzcorejavatraining.git

		
	
	When local variable and instance variable have the same name that time local
	variable hide the visibility of the instance variable. 
	
	this: this is keyword which is use to refer the current object. 

		this.instancevariable = localvariable;

		
	constructor : constructor is a type of special method which is use to create the object. 
	
	Points 
	1. construtor have same name as class itself. 
	2. constructor no return type not even void also. 
	3. constructor no need to call it will call automatically when we create the object. 
	
	In the life of the object if we want to perform any task only one time that type of 
	code write inside as constructor (may be empty or parameter)
	But in the life of the object if we wan to perform any task more than one time 
	that type of code write inside a methods. 

	
	PIEA 

	
	OOPs Properties 

	Encapsulation : Binding or Wrapping data(variables) and code(methods) in a single 
	unit is known as Encapsulation. 

	Ex: class 

	Inheritance : Inheritance is to inherits or acquire the properties and behaviour 
	of old class to new class. 
	
	class OldClass {		super class, base class, parent class 
		properties 
		behaviour 
	}

	class NewClass extends OldClass{ sub class, derived class or child class 
		properties 
		behaviour 
	}	


	Types of Inheritance 

	1. Single Inheritance :One super and one sub class 
	class A {}
	class B extends A {}
	2. Multilevel Inheritane : One super class and n number of sub class connected one 
	by one 
	class A {}
	class B extends A{}
	class C extends B {}
	class D extends C {}
	3. Hierarchical Inheritance : One super class and n number sub classes connected directly 
	class A{}
	class B extends A{}
	class C extneds A{}
	class D extends A{}
	4.Multiple Inheritance : More than one super class and only one sub class 
	class A{}
	class B {}
	class C extends A,B{}			Wrong in Java 		
	This type of inheritance java support using interface. 	


	OOPs Relationship 

	1.	Manager  is a Employee  
	2. 	Employee has a Address  

	class Employee{
		id,name,salary	simple property 	
		Address add;	complext property 
	}
	class Manager extends Employee {

	}
	class Tester extends Employee{

	}
	class Address{
		city,state
		Location loc
	}
	class Location {
		
	}


	Employee ---->

		id,name,salary ---->  instance variables 
		 Scanner obj
		read() {	
			id,name,salary through keyboards 			
		}
		calSalary() {}	hra, da and pf 
		display() 	
	Manager extends Employee		
		numberOfEmp
		readMgr() {
			
		}
		disMgr() {

		}
	EmployeeTest 
	Manager mgr = new Manager();
	mgr.read();
	mgr.readMgr();
	mgr.calSalary();
	mgr.dispaly();
	mgr.disMgr();


	Polymorphism :  One name many forms. 
		one name many implementation 

	2 types 

	Compile time 				Run time 

	Static binding 				Dynamic binding 
	
	Early binding 				Late binding 

	

	Method overloading 				Method Overriding 

	Method Overloading : the method have same name but different parameter list 
	(Number of parameter list as well as type of parameter list must be different).
	
	
	void readInfo() {
		
	}

	void process() {

	}
	void display() {
	
	}	


	void area(int r) {

	}
	void area(int l, int b) {

	}

	void add(int x, int y){

	}
	void add(int x, int y, int z){

	}
	void add(String s1, String s2) {

	}

	Method Overriding :The method have same name and same method signature 
	(number of parameter list, type of parameter list as well as return type must be same).

	
	Annotation : meta-data :data about data. 

	int a;

	@ followed by annotation name 

	abstract , final and static keywords 

	
	abstract keyword :

	1. abstract is keyword we can use with method and class but not with variables.
	2. abstract methods:
	syntax 
	abstract returnType methodName(parameterList);
	abstract void speed();
	The method without body or without curly braces or incomplete method. 
	3. If class contains any abstract method then we have to declare the class as a abstract class
	abstract class className {

	}
	4. Whichever class extends abstract class that class must be provide the body for 
	all abstract method mandatory it can ignore only if that class itself is abstract class. 
	5. Abstract class we can't create the object. 
	6. Abstract class can contains normal as well as abstract methods. 
	ie Zero, 1 or all 
	7. Inside abstract class we can write empty as well as parameterized constructor. 
	

	final keyword : 

	final keyword we can use with variable, method and class. 

	1. final variable : To declare a constant value we use final keyword with variable. 

	final int A=10;

	2. final method : Final method can't override.

	3. final class : final class we can't extends. 

	static keyword : 
	
	1. static keyword we can use with variable and method but not with class. 
		(inner class can be static as well as non static)
	inner class 

	class Outer {
		static int a;
		static void dis() {

		}
		static class Inner {

		}

	}	

	2. For static variable we can assign the value through class name as well as object name

	ClassName.staticVariableName =value;
	objectName.staticvariableName = value;

	3. Static method we can call with the help of className as well as object. 

	className.staticMethodName();
	objectName.staticMethodName();
	4. Inside a static method we can access only static variable directly of the same class.


		

	has a 

	1. Association 
	2. Aggregation 
	3. Composition 
	
	class A {
		B obj1 = new B();	//0, 1, many 
	}
	
	class B {
		A obj2 = new A();	//0, 1, many 
	}

	class Employee {
		Address ladd = new Address();
		Address padd = new Address();	//0, 1, many 
	}

	class Address {

	}

	class Student {
		StudentHistroy sh = new StudentHistroy();
	}
	class StudentHistroy {

	}

	interface : interface is type of reference data type. it is also known as 100% pure abstract class. 

	syntax 

	interface interfaceName {
		variables;
		methods;
	}

	By default all variables are public static and final. 
	By default all methods are public and abstract 
	
	interface Abc {
		//public static final int A=10;
		static final int A=10;
		final int A=10;
		int A=10;
		//public abstract void dis();
		//abstract void dis();
		void dis();
	}

					till java 7, java 8 default or static keyword 
	interface Abc {
		int A=10;
		void dis1();
	}
	interface Xyz {
		int B=20;
		void dis2();
	}
	
	interface Mno extends Abc,Xyz{
		int C=30;
		void dis3();
	}	
	
	class Demo implements Abc,Xyz {
			
	}
	
From java8 interface can contains method with body but we have to use default or static keyword with methods. 


	super					sub 

	
	public 					public 


	protected 					public 
						protected 

	default 					public 
						protected 
						default 

	private 					we can't override 



	package :  package is a collection of classes and interfaces. 

	two types of packages 
	
	1. user-defined package 
	2. pre-defined package or built-in package 

	Date :	util 

	Date :	sql 

				java 

		util			sql


		Date			Date 			

				Education 


	School			College			pg 

	Attendance 		Attendance		Attendance


	package is like folder or diretory. 

	It is use to avoid the conflicts when two classes and interface which have same name but different purpose. 

	syntax 

	package packageName;

	package com;		or 		package com.education.school;
	class PackageDemo {
		public static void main(String args[]) {	
			System.out.println("Welcome to User-defined package");
		}
	}

	compile package program 

	javac -d . packageDemo.java 


	java com.PackageDemo 


	Access Specifiers 

	public : instance variable, static variable, non static method, static method, constructor and class 
		but not with local variable. 
	protected :
		instance variable, static variable, non static method, static method, constructor  
		but not with local variable as well as class. 
	default :	all 
	private :	instance variable, static variable, non static method, static method, constructor  
		but not with local variable as well as class. 


	private : within same class we can access. 

	default : within same package 

	protected : within same package other package if it is a sub class. 

	public : same package as well as other package. 

	
	package pack1;

	public class A {
		public int a;
		protected int b;
		int c
		private int d;
		void dis() {
			a,b,c,d
		}
	}
	public class Demo {
		public static void main(String args[]) {
		A obj1= new A();
		obj1.dis();
			obj1.a, obj1.b, obj1.c, //obj1.d private variable 
		}
	}
	
	package pack2;
	import pack1.A;
	public class B {
		void dis3() {
		A obj1 = new A();
		obj1.a, 	
		}	
	}
	
	package pack2;
	//import pack1.*;
	import pack1.A
	public class C extends A {
		void dis2() {
			a, b, 	
		}
	}
	
		
			pre-defined package 
			

		API : application programming interface 
		

		java				javax ----------------> Root package 

		lang 				swing 

		io 				servlet 

		util 				ejb 

						jms  
		sql 	

		awt 				net 

		net 
		

		lang package :	By default every java program imported lang package. 
		

			By default every java (pre-defined or user-defined )program extends Object class. 

			Object is a pre-defined class part of lang package. 

		lang package. 		
		
		Exception Handling classes 

		
		Exception 
		Error 
		ArithmeticException 		etc 


				Multithreading classes 
		Thread 
		Runnable 

		Object 
		String 
		StringBuffer 
		StringBuilder 


		Exception Handling 

		Exception : exception is a pre-defined object it will generate when unexpected or abnormal
		condition during the exeption of a programs. 

					
				Java 


	compile program 						run program 

	javac : java compiler 						java: java interpreter 

	compile time error 						run time error 

	syntax error or 
	typing error 	
	

				run time error 


			Error 			Exception 


		Error as well as Exception both are pre-defined class part of lang package.

		Error : The error which generate at the run time which we can't handle it is known as 
		Error 

			JVM crash 
			Software or Hardware issue 

		Exeption : It is type of error which generate at the run time which we can handle it 
		
		ArithmeticException : 


				Exception 

		Checked Exception 			UncheckedException 

		
						RuntimeException ---> pre-defined class 
							
							extends 

		IOException			ArthmeticException 
		SQLException 			NumberFormatException 
						ArrayIndexOutOfBoundsExeption 

		etc				etc 

	
		5 keywords is use to handle checked as well as unchecked exception 

		try 	
		catch 

		
		finally 
		throw 
		throws 


		try {


		}catch(Exception e) {

		}		


		try with multiple catch block 


		try {
			file open read/write 
			operation 
			

		}catch(Exception e){
			
		}finally {
			close the file 
		}



		finally : finally block execute 100% sure if exception generated or not.

		finally block is use to close the resoures properly. 

		throws :
		throws keyword is use to throw the exception to caller methods. 

	
		throw : throw keyword is use to generate or raise pre-defined or user-defined exception 
		depends upon the conditions. 

		

		syntax 

		throw new Exception();

			or 

		throw new ExceptionSubClass();


		String, String Buffer, Math, Random, System, Runtime class 

		String is pre-defined class part of lang package.

		String s1 = "Raj";		//string literal 
		String s2 = new String("Raj");	//using new keyword 


		String is known as immutable class. can't change the value. 

		Math :Math class is use to do mathmetical operations. 

	Math class contains all fields and methods are static. 

			

	Day 4 : 28-02-2019

	IO package : File handling 


	#include<stdio.h>

	#include<stream.h>

	
	Stream :	Flow of data or It is abstraction between source and target. 



	Source --> Keyboard, File, Network, database etc 
	
	Target --> Console, File, Network,database etc 

					Stream 

		byte						char 


Input 			Output				Input 		Output 

DataInputStream 	DataOutputStream			InputStreamReader		OutputStreamWriter 
BufferedInputStream BufferedOutputStream		BufferedReader		BufferedWriter 
FileInputSteam	FileOutputStream			FileReader		FileWriter 
ObjectInputStream	ObjectOutputStream			
		PrintStream						PrintWriter 

		System.in
		System.out.println()

	
		InputStream is = System.in;
		InputStream class refer to standard input device ie keyboard 
		
		PrintStream ps = System.out;
		PrintStream class refers to standard output device ie console. 

		
		class Employee {
			static int a=10;
			static Address add = new Address();
		}


			
				int abc = Employee.a;
				Address obj=Employee.add;








	




















	
		
















	





		























								

		




	



	